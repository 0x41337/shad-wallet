{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wallet",
  "type": "registry:block",
  "title": "Shad wallet",
  "description": "A Solana wallet UI to easily and robustly connect wallets.",
  "files": [
    {
      "path": "src/registry/wallet.tsx",
      "content": "import * as React from \"react\"\n\nimport * as CVA from \"class-variance-authority\"\n\nimport * as Radix from \"@radix-ui/react-slot\"\n\nimport * as SolanaWeb3 from \"@solana/web3.js\"\nimport * as SolanaWalletAdapterBase from \"@solana/wallet-adapter-base\"\nimport * as SolanaWalletAdapterReact from \"@solana/wallet-adapter-react\"\nimport * as SolanaWalletAdapterWallets from \"@solana/wallet-adapter-wallets\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nimport {\n    DropdownMenu,\n    DropdownMenuItem,\n    DropdownMenuContent,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogHeader,\n    DialogClose,\n    DialogFooter,\n    DialogContent,\n    DialogTrigger,\n    DialogDescription,\n} from \"@/components/ui/dialog\"\n\nimport { CopyIcon, WalletIcon, LoaderIcon, LogOutIcon } from \"lucide-react\"\n\nconst STRINGS = {\n    button: {\n        label: \"Connect Wallet\",\n        onLoading: \"Connecting...\",\n    },\n    popover: {\n        title: \"Connect your wallet\",\n        onCancel: \"Cancel\",\n        onContinue: \"Continue\",\n        description: \"Connect your Solana wallet in just a few clicks.\",\n    },\n    dropdown: {\n        onCopyAddress: \"Copy adddress\",\n        onChangeWallet: \"Change wallet\",\n        onDisconnectWallet: \"Disconnect wallet\",\n    },\n}\n\nconst BASE_WALLETS: (new (\n    ...args: any[]\n) => SolanaWalletAdapterBase.BaseSignerWalletAdapter)[] = [\n    SolanaWalletAdapterWallets.PhantomWalletAdapter,\n    SolanaWalletAdapterWallets.SolflareWalletAdapter,\n    SolanaWalletAdapterWallets.CoinbaseWalletAdapter,\n    SolanaWalletAdapterWallets.UnsafeBurnerWalletAdapter,\n]\n\nexport const useWallet = () => {\n    return SolanaWalletAdapterReact.useWallet()\n}\n\nconst WalletConnectedManagerDropdown = ({\n    children,\n}: {\n    children: React.ReactNode\n}) => {\n    const { publicKey, disconnect } = useWallet()\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>\n            <DropdownMenuContent>\n                <DropdownMenuItem\n                    onClick={() => {\n                        if (publicKey) {\n                            navigator.clipboard.writeText(publicKey.toString())\n                        }\n                    }}\n                    asChild\n                >\n                    <div className=\"flex flex-row items-center justify-start\">\n                        <CopyIcon />\n                        <p>{STRINGS.dropdown.onCopyAddress}</p>\n                    </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={disconnect} asChild>\n                    <div className=\"flex flex-row items-center justify-start\">\n                        <LogOutIcon />\n                        <p>{STRINGS.dropdown.onDisconnectWallet}</p>\n                    </div>\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n\nconst SelectProviderMenu = (props: { children: React.ReactNode }) => {\n    const { wallets, select, connect } = useWallet()\n\n    const [selected, setSelected] = React.useState<{\n        wallet: SolanaWalletAdapterReact.Wallet | null\n        index: number | null\n    }>({\n        wallet: null,\n        index: null,\n    })\n\n    const handleSelectWallet = async (\n        index: number,\n        wallet: SolanaWalletAdapterReact.Wallet\n    ) => {\n        select(wallet.adapter.name)\n\n        setSelected({\n            wallet,\n            index,\n        })\n    }\n\n    const handleFinishButton = async () => {\n        await connect()\n    }\n\n    return (\n        <Dialog>\n            <DialogTrigger asChild>{props.children}</DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>{STRINGS.popover.title}</DialogTitle>\n                    <DialogDescription>\n                        {STRINGS.popover.description}\n                    </DialogDescription>\n                </DialogHeader>\n                <div className=\"flex flex-col gap-3\">\n                    {wallets.map((wallet, index) => (\n                        <div\n                            key={index}\n                            onClick={() => handleSelectWallet(index, wallet)}\n                            className={cn(\n                                \"py-1 px-2 flex flex-row justify-between items-center rounded-md hover:bg-secondary hover:cursor-pointer\",\n                                index == selected.index ? \"bg-secondary\" : \"\"\n                            )}\n                        >\n                            <div className=\"flex flex-row items-center gap-2\">\n                                <img\n                                    className=\"w-12 drop-shadow-2xl rounded-md p-2 select-none\"\n                                    src={wallet.adapter.icon}\n                                    alt={wallet.adapter.name}\n                                />\n                                <div className=\"flex flex-col items-start\">\n                                    <p className=\"text-lg font-semibold select-none\">\n                                        {wallet.adapter.name}\n                                    </p>\n                                    <p className=\"text-muted-foreground font-mono select-none\">\n                                        {wallet.adapter.readyState}\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <DialogFooter className=\"flex flex-row items-center justify-end\">\n                    <DialogClose asChild>\n                        <Button variant=\"secondary\">\n                            {STRINGS.popover.onCancel}\n                        </Button>\n                    </DialogClose>\n                    <Button\n                        disabled={selected.wallet == null}\n                        onClick={handleFinishButton}\n                    >\n                        {STRINGS.popover.onContinue}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nconst getShortenedPublicKeyFrom = (publicKey: string | undefined) => {\n    return publicKey ? publicKey.slice(0, 4) + \"...\" + publicKey.slice(-4) : \"\"\n}\n\ntype WalletButtonProps = {\n    icon?: {\n        asset?: \"static\" | \"dynamic\"\n    }\n}\n\nexport const WalletButton = ({\n    className,\n    variant,\n    size,\n    icon = { asset: \"static\" },\n    asChild = false,\n    ...props\n}: React.ComponentProps<\"button\"> &\n    WalletButtonProps &\n    CVA.VariantProps<typeof buttonVariants> & {\n        asChild?: boolean\n    }) => {\n    const Comp = asChild ? Radix.Slot : \"button\"\n\n    const { wallet, publicKey, connected, connecting } = useWallet()\n\n    if (connected && wallet) {\n        return (\n            <WalletConnectedManagerDropdown>\n                <Comp\n                    data-slot=\"button\"\n                    className={cn(\n                        \"hover:cursor-pointer\",\n                        buttonVariants({ variant, size, className })\n                    )}\n                    {...props}\n                >\n                    {icon.asset == \"static\" ? (\n                        <WalletIcon />\n                    ) : (\n                        <img\n                            className=\"w-4\"\n                            src={wallet.adapter.icon}\n                            alt={wallet.adapter.name}\n                        />\n                    )}\n                    {getShortenedPublicKeyFrom(publicKey?.toString())}\n                </Comp>\n            </WalletConnectedManagerDropdown>\n        )\n    }\n\n    if (connecting) {\n        return (\n            <Comp\n                data-slot=\"button\"\n                className={cn(\n                    \"hover:cursor-pointer\",\n                    buttonVariants({ variant, size, className })\n                )}\n                disabled\n                {...props}\n            >\n                <LoaderIcon />\n                {STRINGS.button.onLoading}\n            </Comp>\n        )\n    }\n\n    return (\n        <SelectProviderMenu>\n            <Comp\n                data-slot=\"button\"\n                className={cn(\n                    \"hover:cursor-pointer\",\n                    buttonVariants({ variant, size, className })\n                )}\n                {...props}\n            >\n                <WalletIcon />\n                {STRINGS.button.label}\n            </Comp>\n        </SelectProviderMenu>\n    )\n}\n\ntype WalletProviderSettings = {\n    network?: keyof typeof SolanaWalletAdapterBase.WalletAdapterNetwork\n    wallets?: (new (\n        ...args: any[]\n    ) => SolanaWalletAdapterBase.BaseSignerWalletAdapter)[]\n    autoConnect?: boolean\n}\n\nexport const WalletProvider = (props: {\n    settings?: WalletProviderSettings\n    children?: React.ReactNode\n}) => {\n    const {\n        network = \"Devnet\",\n        wallets: extension = [],\n        autoConnect = true,\n    } = props.settings\n        ? props.settings\n        : {\n              network: \"Devnet\",\n              wallets: [],\n              autoConnect: true,\n          }\n\n    const endpoint = React.useMemo(\n        () =>\n            SolanaWeb3.clusterApiUrl(\n                SolanaWalletAdapterBase.WalletAdapterNetwork[network]\n            ),\n        [network]\n    )\n\n    const wallets = React.useMemo(() => {\n        return BASE_WALLETS.concat(extension).map(\n            (Adapter) => new Adapter({ network })\n        )\n    }, [network, extension])\n\n    return (\n        <SolanaWalletAdapterReact.ConnectionProvider endpoint={endpoint}>\n            <SolanaWalletAdapterReact.WalletProvider\n                wallets={wallets}\n                autoConnect={autoConnect}\n            >\n                {props.children}\n            </SolanaWalletAdapterReact.WalletProvider>\n        </SolanaWalletAdapterReact.ConnectionProvider>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}